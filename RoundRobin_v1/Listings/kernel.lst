


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             | .text|,CODE,READONLY,ALIGN=2
    2 00000000                 THUMB
    3 00000000                 EXTERN           current_thread ;current_thread 
                                                            = &current_tcb  
    4 00000000                 EXPORT           SysTick_Handler
    5 00000000                 EXPORT           Kernel_Launch_scheduler
    6 00000000         
    7 00000000         
    8 00000000         SysTick_Handler                      ; Saves R0-R3 , R12
                                                             , LR ,PC & PSR Reg
                                                            ister -> EXCEPTION 
                                                            Stack Frame 
    9 00000000         
   10 00000000         ; Save Previous Context
   11 00000000         
   12 00000000 B672            CPSID            I           ; Change Processor 
                                                            State -> Disable In
                                                            terrupts
   13 00000002 E92D 0FF0       PUSH             {R4-R11}    ; Push registers on
                                                             the stack except t
                                                            he stack frame regi
                                                            sters
   14 00000006 480D            LDR              R0,=current_thread ; R0 = &curr
                                                            ent_thread, Points 
                                                            to current thread's
                                                             TCB, whose quanta 
                                                            has exhausted, so w
                                                            e are saving the co
                                                            ntext 
   15 00000008 6801            LDR              R1,[R0]     ; R1 = current_thre
                                                            ad
   16 0000000A F8C1 D000       STR              SP,[R1]     ; *current_thread/S
                                                            tackPtr = SP => Sav
                                                            es Stack Pointer va
                                                            lue at current_thre
                                                            ad addr which is St
                                                            ackPtr 
   17 0000000E         
   18 0000000E         ; Load next thread & it's stack 
   19 0000000E         
   20 0000000E 6849            LDR              R1,[R1,#4]  ; R1 = current_thre
                                                            ad -> nextpt ;  nav
                                                            igates to 2nd entry
                                                             of tcb which is *n
                                                            ext_thread
   21 00000010 6001            STR              R1,[R0]     ; current_thread = 
                                                            R1 ; Store next_thr
                                                            ead in current_thre
                                                            ad , current_thread
                                                             = next_thread  
   22 00000012         ; above two mean => current_thread = current_thread -> n
                       ext_thread ; dencing thru Linked list
   23 00000012         
   24 00000012 F8D1 D000       LDR              SP,[R1]     ; SP = current_thre
                                                            ad -> stackptr ; 
   25 00000016         
   26 00000016         ; Load New Context
   27 00000016         
   28 00000016 E8BD 0FF0       POP              {R4-R11}



ARM Macro Assembler    Page 2 


   29 0000001A B662            CPSIE            I           ; Change Processor 
                                                            State -> Enable Int
                                                            errupts
   30 0000001C 4770            BX               LR          ; Restores the new 
                                                            thread's registers 
                                                            , including PC , en
                                                            abling new thread's
                                                             execution
   31 0000001E         
   32 0000001E         
   33 0000001E         Kernel_Launch_scheduler
   34 0000001E         
   35 0000001E         ; set SP to SP of first thread 
   36 0000001E         
   37 0000001E 4807            LDR              R0,=current_thread
   38 00000020 6802            LDR              R2,[R0]     ; R2 = current_thre
                                                            ad
   39 00000022 F8D2 D000       LDR              SP,[R2]     ; SP = current_thre
                                                            ad -> StackPtr
   40 00000026 E8BD 0FF0       POP              {R4-R11}
   41 0000002A BC0F            POP              {R0-R3}
   42 0000002C F85D CB04       POP              {R12}
   43 00000030 B001            ADD              SP,SP,#4    ; ignore LR 
   44 00000032 F85D EB04       POP              {LR}        ; POP PC into LR 
   45 00000036 B001            ADD              SP,SP,#4    ; ignore xPSR
   46 00000038 B662            CPSIE            I
   47 0000003A 4770            BX               LR
   48 0000003C         
   49 0000003C         AlIGN
   50 0000003C                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\kernel_1.d -o.\objects\kernel_1.o -I.\RTE\_TM4C123G -
IE:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IE:\Keil_v5\ARM\PACK\Keil\T
M4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="_
_UVISION_VERSION SETA 525" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM
 SETA 1" --list=.\listings\kernel.lst kernel.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

 .text 00000000

Symbol:  .text
   Definitions
      At line 1 in file kernel.s
   Uses
      None
Comment:  .text unused
AlIGN 0000003C

Symbol: AlIGN
   Definitions
      At line 49 in file kernel.s
   Uses
      None
Comment: AlIGN unused
Kernel_Launch_scheduler 0000001E

Symbol: Kernel_Launch_scheduler
   Definitions
      At line 33 in file kernel.s
   Uses
      At line 5 in file kernel.s
Comment: Kernel_Launch_scheduler used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 8 in file kernel.s
   Uses
      At line 4 in file kernel.s
Comment: SysTick_Handler used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

current_thread 00000000

Symbol: current_thread
   Definitions
      At line 3 in file kernel.s
   Uses
      At line 14 in file kernel.s
      At line 37 in file kernel.s

1 symbol
342 symbols in table
